datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Roles {
  user
  admin
  organization_admin
}

model User {
  id                               String    @id @default(uuid())
  lastname                         String
  firstname                        String
  email                            String    @unique @db.VarChar(320)
  token                            String?
  phone_number                     String?
  is_cgu_accepted                  Boolean   @default(false)
  is_vgcl_accepted                 Boolean   @default(false)
  theme_mode                       String    @default("system")
  created_at                       DateTime  @default(now())
  updated_at                       DateTime  @updatedAt
  registered_at                    DateTime  @default(now())
  is_email_verified                Boolean   @default(false)
  email_verification_token         String?
  email_verification_token_expires DateTime?
  image             String?

  // RÃ´le
  role              Roles

  // Relations
  forgotPassword    ForgotPassword[]
  passwordHistory   PasswordHistory[]
  loginHistory      LoginHistory[]
  createdAgents     AgentIA[]     @relation("CreatedBy")
  updatedAgents     AgentIA[]     @relation("UpdatedBy")
  createdOrganization     Organization[]     @relation("CreatedBy")
  updatedOrganization     Organization[]     @relation("UpdatedBy")
  organization      Organization?  @relation(fields: [organization_id], references: [id])
  organization_id   String?
}

model ForgotPassword {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  expiredAt DateTime
  createdAt DateTime  @default(now())
  sentAt    DateTime?
  editedAt  DateTime?
  user      User      @relation(fields: [email], references: [email])

  @@index([email])
}

model PasswordHistory {
  id         String   @id @default(uuid())
  password   String
  created_at DateTime @default(now())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
}

model LoginHistory {
  id   String   @id @default(uuid())
  date DateTime @default(now())

  user_id String
  ip_v4   String?
  ip_v6   String?

  user User @relation(fields: [user_id], references: [id])
}

model AgentIA {
  id             String   @id @default(uuid())
  name           String
  skills         String[]
  description    String?
  url            String
  tarif_unique   Float
  tarif_monthly  Float?
  tarif_annual   Float?
  isVisible      Boolean  @default(true)

  organization_id  String?
  organization     Organization? @relation(fields: [organization_id], references: [id])

  created_by     String?
  createdBy      User?     @relation("CreatedBy", fields: [created_by], references: [id])

  updated_by     String?
  updatedBy      User?     @relation("UpdatedBy", fields: [updated_by], references: [id])

  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model Organization {
  id                String    @id @default(uuid())
  name              String
  siret             String
  siren             String
  rib               String
  vat               String

  users             User[]
  agentIAs          AgentIA[]

  created_by        String?
  createdBy         User?     @relation("CreatedBy", fields: [created_by], references: [id])
  created_at        DateTime  @default(now())

  updated_by        String?
  updatedBy         User?     @relation("UpdatedBy", fields: [updated_by], references: [id])
  updated_at        DateTime  @updatedAt

  deleted_at        DateTime?
}